export default "#define GLSLIFY 1\n// #pragma glslify: inverseIt = require(glsl-inverse)\n\n// uniform float time;\nuniform float fulltime;\nuniform float heightFactor;\n// varying vec2 vUv;\n\n#define M_PI 3.1415926538\n\nvec3 rotateAxis(vec3 p, vec3 axis, float angle) {\n    return mix(dot(axis, p)*axis, p, cos(angle)) + cross(axis,p)*sin(angle);\n}\n\nvoid main() {\n    // vUv = uv;\n    vec3 pos = position;\n\n    float progress = clamp(fulltime, 0.0, 1.0);\n\n    // TWIRL\n    float twistAmount = M_PI * 2.;\n    float direction = sign(cos(M_PI * progress));\n\n    float twirlPeriod = sin(progress * M_PI*2.);\n    \n    float rotateAngle = -direction * pow(sin(progress * M_PI), 1.5) * twistAmount;\n    float twirlAngle = -sin(uv.x -.5) * pow(twirlPeriod, 2.0) * -4.;\n    pos = rotateAxis(pos, vec3(1., 0., 0.), rotateAngle + twirlAngle);\n\n    \n    // SCALE on the sides\n    float scale = pow(abs(cos(fulltime * M_PI)), 2.0) * .33;\n    pos *= 1. - scale;\n    pos.y -= scale * heightFactor * 0.35;\n    pos.x += cos(fulltime * M_PI) * -.02;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}";